#ifdef _WIN32
#    include <windows.h>
// 12345
#    include <shellapi.h>
#    define DECL_EXPORT __declspec(dllexport)
#    define DECL_IMPORT __declspec(dllimport)
#else
#    define DECL_EXPORT
#    define DECL_IMPORT
#endif

#include <iostream>

#ifdef _MSC_VER
#    define PUTENV _putenv
#else
#    define PUTENV putenv
#endif

extern "C" DECL_IMPORT int @APP_MAIN_ENTRY_NAME@(int, char *[]);

int main(int argc, char *argv[]) {
@APP_MAIN_ENVS@
    return @APP_MAIN_ENTRY_NAME@(argc, argv);
}

#ifdef _WIN32

/*
  WinMain() - Initializes Windows and calls user's startup function main().
  NOTE: WinMain() won't be called if the application was linked as a "console"
  application.
*/

// Convert a wchar_t to char string, equivalent to QString::toLocal8Bit()
// when passed CP_ACP.
static inline char *wideToMulti(unsigned int codePage, const wchar_t *aw) {
    const int required = WideCharToMultiByte(codePage, 0, aw, -1, nullptr, 0, nullptr, nullptr);
    char *result = new char[required];
    WideCharToMultiByte(codePage, 0, aw, -1, result, required, nullptr, nullptr);
    return result;
}

extern "C" int APIENTRY WinMain(HINSTANCE, HINSTANCE, LPSTR /*cmdParamarg*/, int /* cmdShow */) {
    int argc = 0;
    wchar_t **argvW = CommandLineToArgvW(GetCommandLineW(), &argc);
    if (argvW == nullptr)
        return -1;
    char **argv = new char *[argc + 1];
    for (int i = 0; i != argc; ++i)
        argv[i] = wideToMulti(CP_ACP, argvW[i]);
    argv[argc] = nullptr;
    LocalFree(argvW);
    const int exitCode = main(argc, argv);
    for (int i = 0; (i != argc) && (argv[i] != nullptr); ++i)
        delete[] argv[i];
    delete[] argv;
    return exitCode;
}

#endif